{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
        "API": {
            "type": "object",
            "description": "Contract API",
            "properties": {
                "initContract": {
                    "type": "object",
                    "description": "Sets contract version and nickname",
                    "properties": {
                        "method": "deploy",
                        "function": {
                            "type": "string",
                            "enum": [
                                "initContract"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "version": {
                                        "$ref": "#/definitions/version"
                                    },
                                    "nickname": {
                                        "$ref": "#/definitions/nickname"
                                    }
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1
                        }
                    }
                },
                "createAssetContainer": {
                    "type": "object",
                    "description": "Creates a new container",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "createAssetContainer"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "container": {
                                        "$ref": "#/definitions/container"
                                    }
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1
                        }
                    }
                },
                "updateAssetContainer": {
                    "type": "object",
                    "description": "Update a contaner's state with one or more property changes",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "updateAssetContainer"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "container": {
                                        "$ref": "#/definitions/container"
                                    }
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1
                        }
                    }
                },
                "deleteAssetContainer": {
                    "type": "object",
                    "description": "Delete a container from world state, transactions remain on the blockchain",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deleteAssetContainer"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "container": {
                                        "type": "object",
                                        "properties": {
                                            "barcode": {
                                                "$ref": "#/definitions/barcode"
                                            }
                                        }
                                    }
                                },
                                "minItems": 1,
                                "maxItems": 1
                            }
                        }
                    }
                },
                "deletePropertiesFromAssetContainer": {
                    "type": "object",
                    "description": "Delete one or more properties from a container's state, an example being temperature, which is only relevant for sensitive (as in frozen) shipments",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deletePropertiesFromAssetContainer"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "container": {
                                        "type": "object",
                                        "properties": {
                                            "barcode": {
                                                "type": "string",
                                                "description": "a container's ID"
                                            }
                                        }
                                    },
                                    "qprops": {
                                        "type": "array",
                                        "description": "Qualified property names, e.g. container.barcode",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1
                        }
                    }
                },
                "deleteAllAssetsContainer": {
                    "type": "object",
                    "description": "Delete all containers from world state, supports filters",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deleteAllAssetsContainer"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/stateFilter"
                            },
                            "minItems": 0,
                            "maxItems": 1
                        }
                    }
                },
                "readAssetContainer": {
                    "type": "object",
                    "description": "Returns the state a container",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetContainer"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "container": {
                                        "type": "object",
                                        "properties": {
                                            "barcode": {
                                                "type": "string",
                                                "description": "a container's ID"
                                            }
                                        }
                                    }
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1
                        },
                        "result": {
                            "$ref": "#/definitions/containerstate"
                        }
                    }
                },
                "readAllAssetsContainer": {
                    "type": "object",
                    "description": "Returns the state of all containers, supports filters",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAllAssetsContainer"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/stateFilter"
                            },
                            "minItems": 0,
                            "maxItems": 1
                        },
                        "result": {
                            "$ref": "#/definitions/containerstatearray"
                        }
                    }
                },
                "readAssetHistoryContainer": {
                    "type": "object",
                    "description": "Returns the history of a container",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetHistoryContainer"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "barcode": {
                                        "$ref": "#/definitions/barcode"
                                    },
                                    "start": {
                                        "type": "string",
                                        "description": "timestamp formatted yyyy-mm-dd hh:mm:ss",
                                        "format": "date-time",
                                        "sample": "yyyy-mm-dd hh:mm:ss"
                                    },
                                    "end": {
                                        "type": "string",
                                        "description": "timestamp formatted yyyy-mm-dd hh:mm:ss",
                                        "format": "date-time",
                                        "sample": "yyyy-mm-dd hh:mm:ss"
                                    }
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1
                        },
                        "result": {
                            "$ref": "#/definitions/containerstatearray"
                        }
                    }
                },
                "readAssetSchemas": {
                    "type": "object",
                    "description": "Returns the API for this contract for the use of self-configuring applications; is MANDATORY for integration with the Watson IoT Platform",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetSchemas"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0
                        },
                        "result": {
                            "type": "object",
                            "properties": {}
                        }
                    }
                },
                "readAssetSamples": {
                    "type": "object",
                    "description": "Returns samples of selected contract objects",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetSamples"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0
                        },
                        "result": {
                            "type": "object",
                            "properties": {}
                        }
                    }
                },
                "readRecentStates": {
                    "type": "object",
                    "description": "Returns the state of recently updated assets",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readRecentStates"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "begin": {
                                        "type": "integer",
                                        "description": "zero based beginning of range"
                                    },
                                    "end": {
                                        "type": "integer",
                                        "description": "zero based end of range, absence means to end"
                                    }
                                }
                            },
                            "minItems": 0,
                            "maxItems": 0
                        },
                        "result": {
                            "$ref": "#/definitions/containerstatearray"
                        }
                    }
                },
                "readAllRoutes": {
                    "type": "object",
                    "description": "Returns an array of registered API calls by function (debugging)",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAllRoutes"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0
                        },
                        "result": {
                            "$ref": "#/definitions/containerstatearray"
                        }
                    }
                },
                "readContractState": {
                    "type": "object",
                    "description": "Returns this contract instance's version and nickname",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readContractState"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0
                        },
                        "result": {
                            "$ref": "#/definitions/contractState"
                        }
                    }
                },
                "setLoggingLevel": {
                    "type": "object",
                    "description": "Sets the logging level for the contract",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "setLoggingLevel"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "logLevel": {
                                        "type": "string",
                                        "enum": [
                                            "CRITICAL",
                                            "ERROR",
                                            "WARNING",
                                            "NOTICE",
                                            "INFO",
                                            "DEBUG"
                                        ]
                                    }
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1
                        }
                    }
                },
                "setCreateOnUpdate": {
                    "type": "object",
                    "description": "Allow updateAsset to create a container upon receipt of its first event",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "setCreateOnUpdate"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "setCreateOnUpdate": {
                                        "type": "object",
                                        "description": "Allows updates to create missing assets on first event",
                                        "properties": {
                                            "createOnUpdate": {
                                                "type": "boolean"
                                            }
                                        }
                                    }
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1
                        }
                    }
                },
                "readWorldState": {
                    "type": "object",
                    "description": "Returns the entire contents of world state",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readWorldState"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0
                        },
                        "result": {
                            "type": "object",
                            "properties": {}
                        }
                    }
                },
                "deleteWorldState": {
                    "type": "object",
                    "description": "**** WARNING *** Clears the entire contents of world state, redeploy the contract after using this, in debugging mode, will require a restart",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deleteWorldState"
                            ]
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0
                        }
                    }
                }
            }
        },
        "version": {
            "type": "string",
            "description": "The version number of the current contract instance"
        },
        "nickname": {
            "type": "string",
            "default": "CTIORSAMPLE",
            "description": "The nickname of the current contract instance"
        },
        "barcode": {
            "type": "string",
            "description": "A container's ID"
        },
        "alertName": {
            "type": "string",
            "enum": [
                "OVERTTEMP"
            ],
            "description": "An alert name"
        },
        "alerts": {
            "type": "array",
            "description": "A list of alert names",
            "items": {
                "$ref": "#/definitions/alertName"
            }
        },
        "geo": {
            "description": "A geographical coordinate",
            "type": "object",
            "properties": {
                "latitude": { "type": "number" },
                "longitude": { "type": "number" }
            }
        },
        "QProps": {
            "type": "array",
            "items": {
                "type": "string",
                "description": "A qualified name of a property such as container.barcode"
            }
        },
        "container": {
            "type": "object",
            "description": "The changeable properties for a container, also considered its 'event' as a partial state",
            "properties": {
                "common": {
                    "$ref": "#/definitions/ioteventcommon"
                },
                "barcode": {
                    "$ref": "#/definitions/barcode"
                },
                "temperature": {
                    "type": "number",
                    "description": "Temperature of a container's contents in degrees Celsuis"
                },
                "carrier": {
                    "type": "string",
                    "description": "The carrier in possession of this container"
                }
            },
            "required": [
                "barcode"
            ]
        },
        "invokeevent": {
            "type": "object",
            "description": "An chaincode event emitted by a contract invoke",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The chaincode event's name"
                },
                "payload": {
                    "type": "object",
                    "description": "The chaincode event's properties",
                    "properties": {}
                }
            }
        },
        "ioteventcommon": {
            "type": "object",
            "description": "Common properties for all containers",
            "properties": {
                "devicetimestamp": {
                    "type": "string",
                    "description": "A timestamp recoded by the device that sent the current event"
                },
                "deviceID": {
                    "type": "string",
                    "description": "A unique identifier for the device that sent the current event"
                },
                "location": {
                    "$ref": "#/definitions/geo"
                },
                "appdata": {
                    "type": "array",
                    "description": "Application managed information as an array of key:value pairs",
                    "minItems": 0,
                    "items": {
                        "type": "object",
                        "properties": {
                            "K": {
                                "type": "string"
                            },
                            "V": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "containerstate": {
            "type": "object",
            "description": "A container's complete state",
            "properties": {
                "class": {
                    "type": "string",
                    "description": "The container's asset class"
                },
                "prefix": {
                    "type": "string",
                    "description": "The container's asset class prefix in world state"
                },
                "assetIDpath": {
                    "type": "string",
                    "description": "Qualified property path to the container's ID, declared in the contract code"
                },
                "AssetKey": {
                    "type": "string",
                    "description": "This container's world state container ID"
                },
                "state": {
                    "type": "object",
                    "description": "Properties that have been received or calculated for this container",
                    "properties": {
                        "container": {
                            "$ref": "#/definitions/container"
                        }
                    }
                },
                "eventin": {
                    "type": "object",
                    "description": "The contract event that created this state, for example updateAssetContainer",
                    "properties": {
                        "container": {
                            "$ref": "#/definitions/container"
                        }
                    }
                },
                "txnts": {
                    "type": "string",
                    "description": "Transaction timestamp matching the blockchain"
                },
                "txnid": {
                    "type": "string",
                    "description": "Transaction UUID matching the blockchain"
                },
                "eventout": {
                    "type": "object",
                    "description": "The chaincode event emitted on invoke exit, if any",
                    "properties": {
                        "container": {
                            "$ref": "#/definitions/invokeevent"
                        }
                    }
                },
                "alerts": {
                    "$ref": "#/definitions/alerts"
                },
                "compliant": {
                    "type": "boolean",
                    "description": "This container has no active alerts"
                }
            }
        },
        "containerstateexternal": {
            "type": "object",
            "patternProperties": {
                "^CON": {
                    "type": "object",
                    "description": "The external state of one container asset, named by its world state ID",
                    "$ref": "#/definitions/containerstate"
                }
            }
        },
        "stateFilter": {
            "type": "object",
            "description": "Match mode plus array of property : value pairs",
            "properties": {
                "match": {
                    "type": "string",
                    "description": "Select match mode, missing property counts as not matched",
                    "enum": [
                        "ALL",
                        "ANY",
                        "NONE"
                    ]
                },
                "select": {
                    "type": "array",
                    "description": "Array of property : value pairs to match",
                    "items": {
                        "type": "object",
                        "properties": {
                            "qprop": {
                                "type": "string",
                                "description": "Qualified property name, e.g. container.barcode"
                            },
                            "value": {
                                "type": "string",
                                "description": "Property value to be matched"
                            }
                        }
                    }
                }
            }
        },
        "containerstatearray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/containerstateexternal"
            },
            "minItems": 0,
            "description": "Array of container states, can mix asset classes"
        },
        "contractState": {
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/definitions/version"
                },
                "nickname": {
                    "$ref": "#/definitions/nickname"
                }
            }
        }
    }
}