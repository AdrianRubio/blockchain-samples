PACKAGE DOCUMENTATION

package ctasset
    import "/local-dev/src/github.com/ibm-watson-iot/blockchain-samples/iotbase/ctasset"


VARIABLES

var AllAssetClass = AssetClass{"All", "", ""}
    AllAssetClass is the class of all assets

var MatchName = map[int]string{
    0: "matchall",
    1: "matchany",
    2: "matchnone",
}
    MatchName is a map of ID to name

var MatchValue = map[string]int32{
    "matchall":  0,
    "matchany":  1,
    "matchnone": 2,
}
    MatchValue is a map of name to ID

FUNCTIONS

func DeleteWorldState(stub *shim.ChaincodeStub) error
    DeleteWorldState clear everything out from the database for DEBUGGING
    purposes ...

func ReadWorldState(stub *shim.ChaincodeStub) ([]byte, error)
    ReadWorldState read everything in the database for debugging purposes
    ...

TYPES

type Asset struct {
    Class     AssetClass              `json:"assetclass"` // this asset's class
    AssetKey  string                  `json:"assetkey"`   // world state key prefixed
    State     *map[string]interface{} `json:"state"`      // current state
    EventIn   *map[string]interface{} `json:"eventin"`    // most recent event
    TXNID     string                  `json:"txnid"`      // transaction UUID linking back to blockchain
    TXNTS     *time.Time              `json:"txnts"`      // transaction timestamp matching blockchain
    EventOut  *InvokeEvent            `json:"eventout"`   // event (if any) emitted upon exit from the invoke
    Alerts    *[]string               `json:"alerts"`     // array of active alerts
    Compliant bool                    `json:"compliant"`  // true if the asset complies with the contract terms
}
    Asset is a type that holds all information about an asset, including its
    name, its world state prefix, and the qualified property name that is
    its assetID

func (a Asset) String() string

type AssetArray []Asset
    AssetArray is an array of assets, used by read all, recent states,
    history, etc.

func ReadAllAssetsUnmarshalled(stub *shim.ChaincodeStub, args []string, class string, prefix string) (AssetArray, error)
    ReadAllAssetsUnmarshalled returns all assets of a specific class from
    world state as an object, intended for internal use

func (a AssetArray) Len() int

func (a AssetArray) Less(i, j int) bool

func (aa AssetArray) String() string

func (a AssetArray) Swap(i, j int)

type AssetClass struct {
    Name        string `json:"name"`        // asset class name
    Prefix      string `json:"prefix"`      // asset class prefix for key in world state
    AssetIDPath string `json:"assetIDpath"` // property that is unique key for this class
}
    AssetClass defines a receiver for rules and other class-specific
    execution

func (c *AssetClass) CreateAsset(stub *shim.ChaincodeStub, args []string, inject []QPropNV) ([]byte, error)
    CreateAsset inializes a new asset and stores it in world state

func (c AssetClass) NewAsset() Asset
    NewAsset create an instance of an asset class

func (c AssetClass) ReadAllAssets(stub *shim.ChaincodeStub, args []string) ([]byte, error)
    ReadAllAssets returns all assets of a specific class from world state as
    an array

func (c *AssetClass) ReadAsset(stub *shim.ChaincodeStub, args []string) ([]byte, error)
    ReadAsset returns an asset from world state, intended to be returned
    directly to a client

func (c AssetClass) String() string

type Filters interface {
    // contains filtered or unexported methods
}
    Filters is the interface for our filter mechanism

type InvokeEvent struct {
    Name    string                 `json:"name"`
    Payload map[string]interface{} `json:"payload"`
}
    InvokeEvent carries the event that is to be set upon exit from the
    chaincode

type MatchType int32
    MatchType denotes how a filter should operate.

const (
    // MatchAll requires that every property in the filter be present and have
    // the same value
    MatchAll MatchType = 0
    // MatchAny requires that at least one property in the filter be present and have
    // the same value
    MatchAny MatchType = 1
    // MatchNone requires that every property in the filter either be present and have
    // a different value. or not be present
    MatchNone MatchType = 2
)

func (x MatchType) String() string

type QPropNV struct {
    QProp string `json:"qprop"`
    Value string `json:"value"`
}
    QPropNV is a single search entry to be matched - the qualifiedProperty
    field denotes a path to a leaf node in the object - the value property
    denotes the value to match against

type StateFilter struct {
    MatchMode string    `json:"matchmode"`
    Entries   []QPropNV `json:"entries"`
}
    StateFilter is an array of QPropNV


