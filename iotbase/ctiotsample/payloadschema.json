{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
        "API": {
            "type": "object",
            "description": "The API for the tradelane sample contract consisting of the init function, the crud functions to change state, and a set of query functions for asset state, asset history, recent states, and so on.",
            "properties": {
                "init": {
                    "type": "object",
                    "description": "Initializes the contract when started, either by deployment or by peer restart.",
                    "properties": {
                        "method": "deploy",
                        "function": {
                            "type": "string",
                            "enum": [
                                "init"
                            ],
                            "description": "init function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "version": {
                                    "$ref": "#/definitions/version"
                                },
                                "nickname": {
                                    "$ref": "#/definitions/nickname"
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "createAssetContainer": {
                    "type": "object",
                    "description": "Create an asset. One argument, a JSON encoded event. The 'assetID' property is required with zero or more writable properties. Establishes an initial asset state.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "createAsset"
                            ],
                            "description": "createAsset function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/container"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "updateAssetContainer": {
                    "type": "object",
                    "description": "Update the state of an asset. The one argument is a JSON encoded event. The 'assetID' property is required along with one or more writable properties. Establishes the next asset state. ",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "updateAsset"
                            ],
                            "description": "updateAsset function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/container"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "deleteAssetContainer": {
                    "type": "object",
                    "description": "Delete an asset, its history, and any recent state activity. Argument is a JSON encoded string containing only an 'assetID'.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deleteAsset"
                            ],
                            "description": "deleteAsset function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/barcode"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "deletePropertiesFromAssetContainer": {
                    "type": "object",
                    "description": "Delete one or more properties from an asset's state. Argument is a JSON encoded string containing an 'assetID' and an array of qualified property names. For example, in an event object containing common and custom properties objects, the argument might look like {'assetID':'A1',['common.location', 'custom.carrier', 'custom.temperature']} and the result of that invoke would be the removal of the location, carrier and temperature properties. The missing temperature would clear a 'OVERTEMP' alert when the rules engine runs.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deletePropertiesFromAsset"
                            ],
                            "description": "deletePropertiesFromAsset function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "barcode": {
                                    "$ref": "#/definitions/barcode"
                                },
                                "qprops": {
                                    "$ref": "#/definitions/QProps"
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "deleteAllAssetsContainer": {
                    "type": "object",
                    "description": "Delete the state of all assets. No arguments are accepted. For each managed asset, the state and history are erased, and the asset is removed if necessary from recent states.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deleteAllAssets"
                            ],
                            "description": "deleteAllAssets function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        }
                    }
                },
                "readAssetContainer": {
                    "type": "object",
                    "description": "Returns the state an asset. Argument is a JSON encoded string. The arg is an 'assetID' property.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAsset"
                            ],
                            "description": "readAsset function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "barcode": {
                                    "$ref": "#/definitions/barcode"
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        },
                        "result": {
                            "$ref": "#/definitions/containerstate"
                        }
                    }
                },
                "readAllAssetsContainer": {
                    "type": "object",
                    "description": "Returns the state of all assets as an array of JSON encoded strings. Accepts no arguments. For each managed asset, the state is read from the ledger and added to the returned array. Array is sorted by 'assetID'.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAllAssets"
                            ],
                            "description": "readAllAssets function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "$ref": "#/definitions/containerstatearray"
                        }
                    }
                },
                "readAssetHistoryContainer": {
                    "type": "object",
                    "description": "Requests a specified number of history states for an assets. Returns an array of states sorted with the most recent first. The 'assetID' property is required and the count property is optional. A missing count, a count of zero, or too large a count returns all existing history states.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetHistory"
                            ],
                            "description": "readAssetHistory function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "barcode": {
                                    "$ref": "#/definitions/barcode"
                                },
                                "start": {
                                    "type": "string",
                                    "description": "timestamp formatted yyyy-mm-dd hh:mm:ss",
                                    "format": "date-time",
                                    "sample": "yyyy-mm-dd hh:mm:ss"
                                },
                                "end": {
                                    "type": "string",
                                    "description": "timestamp formatted yyyy-mm-dd hh:mm:ss",
                                    "format": "date-time",
                                    "sample": "yyyy-mm-dd hh:mm:ss"
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        },
                        "result": {
                            "$ref": "#/definitions/containerstatearray"
                        }
                    }
                },
                "readAssetSchemas": {
                    "type": "object",
                    "description": "Returns a string generated from the schema that contains APIs and Objects as specified in the file 'generate.json' in the /scripts folder.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetSchemas"
                            ],
                            "description": "readAssetSchemas function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "type": "object",
                            "description": "Selected samples, controlled by generate.json",
                            "properties": {}
                        }
                    }
                },
                "readAssetSamples": {
                    "type": "object",
                    "description": "Returns a string generated from the schema that contains sample Objects as specified in the file 'generate.json' in the /scripts folder.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetSamples"
                            ],
                            "description": "readAssetSamples function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "type": "object",
                            "description": "Selected schemas, controlled by generate.json",
                            "properties": {}
                        }
                    }
                },
                "readRecentStates": {
                    "type": "object",
                    "description": "Returns the state of recently updated assets as an array of objects sorted with the most recently updated asset first. Each asset appears exactly once up to a maxmum of 20 in this version of the contract.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readRecentStates"
                            ],
                            "description": "readRecentStates function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "$ref": "#/definitions/containerstatearray"
                        }
                    }
                },
                "readContractState": {
                    "type": "object",
                    "description": "Returns the state of the contract, which includes its version, its nickname and a list of 'assetID's that are currently managed.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readContractState"
                            ],
                            "description": "readContractState function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "$ref": "#/definitions/contractState"
                        }
                    }
                },
                "setLoggingLevel": {
                    "type": "object",
                    "description": "Sets the logging level in the contract.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "setLoggingLevel"
                            ],
                            "description": "setLoggingLevel function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "logLevel": {
                                    "type": "string",
                                    "enum": [
                                        "CRITICAL",
                                        "ERROR",
                                        "WARNING",
                                        "NOTICE",
                                        "INFO",
                                        "DEBUG"                                    
                                    ]
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "logging levels indicate what you see"
                        }
                    }
                },
                "setCreateOnUpdate": {
                    "type": "object",
                    "description": "Allow updateAsset to redirect to createAsset when 'assetID' does not exist.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "setCreateOnUpdate"
                            ],
                            "description": "setCreateOnUpdate function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "setCreateOnUpdate": {
                                    "type": "boolean"
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "True for redirect allowed, false for error on asset does not exist."
                        }
                    }
                }
            }
        },
        "version": {
            "type": "string",
            "description": "The version number of the current contract"
        },
        "nickname": {
            "type": "string",
            "default": "CTIORSAMPLE",
            "description": "The nickname of the current contract"
        },
        "barcode": {
            "type": "string",
            "description": "The ID of a container."
        },
        "alertName": {
            "type": "string",
            "enum": [
                "OVERTTEMP"
            ],
            "description": "Container alerts. Triggered or cleared by contract rules."
        },
        "alerts": {
            "type": "array",
            "description": "List of alert names that are currently active.",
            "items": {
                "$ref": "#/definitions/alertName"
            }
        },
        "geo": {
            "description": "A geographical coordinate",
            "type": "object",
            "properties": {
                "latitude": { "type": "number" },
                "longitude": { "type": "number" }
            }
        },
        "QProps": {
            "type": "array",
            "items": {
                "type": "string",
                "description": "The qualified name of a property. E.g. 'event.common.carrier', 'event.custom.temperature', etc." 
            }
        },
        "container": {
            "type": "object",
            "description": "The set of writable properties that define an asset's state. For asset creation, the only mandatory property is the 'assetID'. Updates should include at least one other writable property. This exemplifies the IoT contract pattern 'partial state as event'.",
            "properties": {
                "common": {
                    "$ref": "#/definitions/ioteventcommon"
                },
                "barcode": {
                    "$ref": "#/definitions/barcode"
                },
                "temperature": {
                    "type": "number",
                    "description": "Temperature of the inside of the container in CELSIUS."
                },
                "carrier": {
                    "type": "string",
                    "description": "transport entity currently in possession of the container"
                }
            },
            "required": [
                "barcode"
            ]
        },
        "invokeevent": {
            "type": "object",
            "description": "An event that is emitted at the end of an invoke, if it is present.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Event name."
                },
                "payload": {
                    "type": "object",
                    "description": "A json object containing the event's properties.",
                    "properties": {}
                }
            }
        },
        "ioteventcommon": {
            "type": "object",
            "description": "The set of common properties for any event to a contract that adheres to the IoT contract pattern 'partial state as event' for assets and that may have pure events that are *about* these assets.",
            "properties": {
                "devicetimestamp": {
                    "type": "string",
                    "description": "Optional device timestamp. Note that the contract retains the blockchain-assigned transaction UUID and timestamp, which reflect the time that the event arrived at the Hyperledger fabric. The device timestamp has meaning that is relevant to the device, asset and application context."
                },
                "location": {
                    "$ref": "#/definitions/geo"
                },
                "extension": {
                    "type": "array",
                    "description": "Application managed array of extension properties. Opaque to contract. To be used in emergencies or for sidecar information that is not relevant to contract rule processing.",
                    "minItems": 0,
                    "items": { "type": "object", "properties": {} }
                },
                "references": {
                    "type": "array",
                    "description": "An array of external references relevant to this asset.",
                    "minItems": 0,
                    "items": { "type": "string" }
                }
            }
        },
        "containerstate": {
            "type": "object",
            "description": "The shape of all asset states.",
            "properties": {
                "class": {
                    "type": "string",
                    "description": "Asset class."
                },
                "prefix": {
                    "type": "string",
                    "description": "Asset class prefix in World State."
                },
                "assetIDpath": {
                    "type": "string",
                    "description": "Qualified property path to the asset's ID."
                },
                "AssetKey": {
                    "type": "string",
                    "description": "The World State asset ID. Used to read and write state."
                },
                "state": {
                    "type": "object",
                    "description": "The state of the one asset.",
                    "properties": {
                        "container": {
                            "$ref": "#/definitions/container"
                        }
                    }
                },
                "eventin": {
                    "type": "object",
                    "description": "The event that created this state.",
                    "properties": {
                        "container": {
                            "$ref": "#/definitions/container"
                        }
                    }
                },
                "txnts": {
                    "type": "string",
                    "description": "Transaction timestamp matching that in the blockchain."
                },
                "txnid": {
                    "type": "string",
                    "description": "Transaction UUID matching that in the blockchain."
                },
                "eventout": {
                    "type": "object",
                    "description": "A chaincode event to be emitted on invoke exit.",
                    "properties": {
                        "container": {
                            "$ref": "#/definitions/invokeevent"
                        }
                    }
                },
                "alerts": {
                    "$ref": "#/definitions/alerts"
                },
                "compliant": {
                    "type": "boolean",
                    "description": "A contract-specific indication that this asset is compliant."
                }
            }
        },
        "containerstateexternal": {
            "type": "object",
            "patternProperties": {
                "^CON": {
                    "type": "object",
                    "description": "The external state of one container asset.",
                    "$ref": "#/definitions/containerstate"
                }
            }
        },
        "containerstatearray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/containerstateexternal"
            },
            "minItems": 0,
            "description": "an array of container states, often for different assets"
        },
        "contractState": {
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/definitions/version"
                },
                "nickname": {
                    "$ref": "#/definitions/nickname"
                }
            }
        }
    }
}