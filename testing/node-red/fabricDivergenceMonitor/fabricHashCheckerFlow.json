[{
	"id": "e4b50543.caca08",
	"type": "http request",
	"z": "ee65744e.f688e8",
	"name": "VP0",
	"method": "GET",
	"ret": "txt",
	"url": "https://<your fabric here>_vp0.us.blockchain.ibm.com/chain",
	"tls": "",
	"x": 214,
	"y": 206,
	"wires": [["1438fb60.54b245"]]
},
{
	"id": "90967fd9.89414",
	"type": "inject",
	"z": "ee65744e.f688e8",
	"name": "POLL",
	"topic": "",
	"payload": "{}",
	"payloadType": "json",
	"repeat": "15",
	"crontab": "",
	"once": false,
	"x": 149,
	"y": 82,
	"wires": [["e4b50543.caca08",
	"fe770b27.aebda8",
	"d9fa7692.734ee8",
	"6e0acf5d.f3c9f"]]
},
{
	"id": "1438fb60.54b245",
	"type": "json",
	"z": "ee65744e.f688e8",
	"name": "DECODE",
	"x": 342,
	"y": 264,
	"wires": [["6033f37.3cc350c",
	"29211ade.6f5af6"]]
},
{
	"id": "fe770b27.aebda8",
	"type": "http request",
	"z": "ee65744e.f688e8",
	"name": "VP1",
	"method": "GET",
	"ret": "txt",
	"url": "https://<your fabric here>_vp1.us.blockchain.ibm.com/chain",
	"tls": "",
	"x": 157,
	"y": 291,
	"wires": [["623c2911.30c1d8"]]
},
{
	"id": "623c2911.30c1d8",
	"type": "json",
	"z": "ee65744e.f688e8",
	"name": "DECODE",
	"x": 327,
	"y": 321,
	"wires": [["6033f37.3cc350c",
	"29211ade.6f5af6"]]
},
{
	"id": "6033f37.3cc350c",
	"type": "join",
	"z": "ee65744e.f688e8",
	"name": "",
	"mode": "custom",
	"build": "array",
	"property": "payload.height",
	"propertyType": "msg",
	"key": "topic",
	"joiner": "\\n",
	"timeout": "3",
	"count": "4",
	"x": 618,
	"y": 209,
	"wires": [["e44f203d.06cfd"]]
},
{
	"id": "d9fa7692.734ee8",
	"type": "http request",
	"z": "ee65744e.f688e8",
	"name": "VP2",
	"method": "GET",
	"ret": "txt",
	"url": "https://<your fabric here>_vp2.us.blockchain.ibm.com/chain",
	"tls": "",
	"x": 138,
	"y": 370,
	"wires": [["f7ee28ba.9cbb08"]]
},
{
	"id": "6e0acf5d.f3c9f",
	"type": "http request",
	"z": "ee65744e.f688e8",
	"name": "VP3",
	"method": "GET",
	"ret": "txt",
	"url": "https://<your fabric here>_vp3.us.blockchain.ibm.com/chain",
	"tls": "",
	"x": 129,
	"y": 437,
	"wires": [["afd68f4f.7d6e9"]]
},
{
	"id": "f7ee28ba.9cbb08",
	"type": "json",
	"z": "ee65744e.f688e8",
	"name": "DECODE",
	"x": 315,
	"y": 378,
	"wires": [["29211ade.6f5af6",
	"6033f37.3cc350c"]]
},
{
	"id": "afd68f4f.7d6e9",
	"type": "json",
	"z": "ee65744e.f688e8",
	"name": "DECODE",
	"x": 301,
	"y": 437,
	"wires": [["6033f37.3cc350c",
	"29211ade.6f5af6"]]
},
{
	"id": "29211ade.6f5af6",
	"type": "join",
	"z": "ee65744e.f688e8",
	"name": "",
	"mode": "custom",
	"build": "array",
	"property": "payload.currentBlockHash",
	"propertyType": "msg",
	"key": "topic",
	"joiner": "\\n",
	"timeout": "2",
	"count": "4",
	"x": 611,
	"y": 496,
	"wires": [["d345c27e.de1a5"]]
},
{
	"id": "e44f203d.06cfd",
	"type": "function",
	"z": "ee65744e.f688e8",
	"name": "COMPARE Height",
	"func": "var t = typeof msg\nif ( t !== \"object\" ) {\n    console.log(\"ERROR: \" + tostring(msg))\n    msg.payload = {}\n    msg.payload.error = true\n    return msg\n}\n\nvar heightsame = true\nvar height = msg.payload.height[0]\nfor ( i = 0; i < msg.payload.height.length; i++) {\n    if ( msg.payload.height[i] != height) {\n        heightsame = false;\n        break;\n    }\n}\nmsg.payload = {}\nmsg.payload.heightsame = heightsame ? \"Y\" : \"N\"\nmsg.payload.heightall = heightsame ? height : \"variable\"\nreturn msg",
	"outputs": 1,
	"noerr": 0,
	"x": 802,
	"y": 282,
	"wires": [["d345c27e.de1a5"]]
},
{
	"id": "e6f03918.db2e38",
	"type": "function",
	"z": "ee65744e.f688e8",
	"name": "COMPARE Hash",
	"func": "if ( msg.payload.error ) {\n    msg.payload = {}\n    msg.payload.comment = \"upstream error, hashes not compared\"\n    return msg\n}\n\nvar heightall = msg.payload.heightall\nvar comment = \"message set complete\"\nif ( msg.payload.currentBlockHash.length != 4 ) {\n    // incomplete series\n    comment = \"message set incomplete [\" + msg.payload.currentBlockHash.length + \"/4]\" \n}\nvar nullhashes = false\nif ( msg.payload.heightsame === \"Y\" ) {\n    var hashsame = true\n    var hash = msg.payload.currentBlockHash[0]\n    for ( i = 0; i < msg.payload.currentBlockHash.length; i++) {\n        if ( msg.payload.currentBlockHash[i] != hash) {\n            hashsame = false;\n            break;\n        }\n        if ( msg.payload.currentBlockHash[i] == null ) {\n            nullhashes = true;\n            break;\n        }\n    }\n    msg.payload = {}\n    msg.payload.comment = comment\n    msg.payload.hashsame = hashsame ? \"Y\" : \"N\"\n    msg.payload.nullhashes = nullhashes ? \"Y\" : \"N\"\n    msg.payload.heightall = heightall\n    return msg    \n}\nmsg.payload = {}\nmsg.payload.comment = \"chain height inconsistent, hashes not compared\"\nmsg.payload.heightall = heightall\nreturn msg",
	"outputs": 1,
	"noerr": 0,
	"x": 1016,
	"y": 365,
	"wires": [["ff9f872.0417078"]]
},
{
	"id": "ff9f872.0417078",
	"type": "debug",
	"z": "ee65744e.f688e8",
	"name": "",
	"active": true,
	"console": "false",
	"complete": "payload",
	"x": 1206,
	"y": 425,
	"wires": []
},
{
	"id": "d345c27e.de1a5",
	"type": "join",
	"z": "ee65744e.f688e8",
	"name": "",
	"mode": "custom",
	"build": "merged",
	"property": "payload",
	"propertyType": "msg",
	"key": "topic",
	"joiner": "\\n",
	"timeout": "2",
	"count": "2",
	"x": 827,
	"y": 426,
	"wires": [["e6f03918.db2e38"]]
},
{
	"id": "ea4533c3.8e27d",
	"type": "comment",
	"z": "ee65744e.f688e8",
	"name": "README",
	"info": "# How This Flow Works\n\nThe four VPx nodes contain a URL property \nthat you will have to adjust. It assumes 4 peers\nbecause that is a minimum viable fabric, and Bluemix\ncreates fabrics with 4 peers as of October 2016.\n\nThe flow will poll your four peers every 15 seconds \nusing the <URL:port>/chain REST endpoint. The \nresponses from the peers are decoded and sent \nto two join nodes, each of which creates an array\nof a specific property -- chain height on the top\njoin, and currentBlockHash on the bottom join.\n\nTimeouts are set so that height processing slightly \nprecedes block hash processing so that the result\nof the height processing is joined with the result \nof the initial block hash join. \n\nIf the chain heights are all the same, then the \nhash comparison will proceed. Else it will print\na message that it cannot proceed.\n\nWhen hashes diverge, the outgoing message has the\nproperty { \"hashsame\" : \"N\" }, which can be \nforwarded to another flow for further processing, \nstored in a database, or otherwise used to signal \nchain divergence.\n\nThis is useful for debugging the behavior of a\nsmart contract under load. Non-deterministic \nbehaviors will lead to block hash divergence, \nwhich will permanently corrupt a blockchain.\n\n# Configuring This Flow\n\nDouble click each validating peer HTML node and\nadd your peer URL for that specific node. You \nshould be following the standard naming pattern\n\"vpx\" so that your fabric logs and reports from\ntools such as this one make sense.\n\n# Caveats\n\nThis is not a complete solution, and it is not \nperfectly reliable. However, it reports incomplete\ndata sets and it handles timeouts relatively \nsmoothly. Typical errors appear in the outgoing\nmessages so that a downstream flow can use only\nknown good data.",
	"x": 150,
	"y": 580,
	"wires": []
}]
