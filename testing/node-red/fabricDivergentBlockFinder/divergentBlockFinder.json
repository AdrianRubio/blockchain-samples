[{
	"id": "eca9c456.790098",
	"type": "subflow",
	"name": "getBlockFromPeers",
	"info": "",
	"in": [{
		"x": 56,
		"y": 50,
		"wires": [{
			"id": "9a3cbbad.6a59d8"
		},
		{
			"id": "c27c3b11.1ec388"
		}]
	}],
	"out": [{
		"x": 1156,
		"y": 632,
		"wires": [{
			"id": "4d3a638e.6812cc",
			"port": 0
		}]
	}]
},
{
	"id": "eba605e9.fc65f8",
	"type": "http request",
	"z": "eca9c456.790098",
	"name": "VP0",
	"method": "GET",
	"ret": "txt",
	"url": "",
	"tls": "",
	"x": 495,
	"y": 234,
	"wires": [["7f840305.e761dc"]]
},
{
	"id": "7f840305.e761dc",
	"type": "json",
	"z": "eca9c456.790098",
	"name": "DECODE",
	"x": 733,
	"y": 330,
	"wires": [["de37ac0b.c983a"]]
},
{
	"id": "75ef31d.bedb0d",
	"type": "http request",
	"z": "eca9c456.790098",
	"name": "VP1",
	"method": "GET",
	"ret": "txt",
	"url": "",
	"tls": "",
	"x": 496,
	"y": 291,
	"wires": [["f6a08521.906e08"]]
},
{
	"id": "f6a08521.906e08",
	"type": "json",
	"z": "eca9c456.790098",
	"name": "DECODE",
	"x": 727,
	"y": 398,
	"wires": [["de37ac0b.c983a"]]
},
{
	"id": "34d27c84.76bdf4",
	"type": "http request",
	"z": "eca9c456.790098",
	"name": "VP2",
	"method": "GET",
	"ret": "txt",
	"url": "",
	"tls": "",
	"x": 496,
	"y": 350,
	"wires": [["8efdd8a2.a2c8e8"]]
},
{
	"id": "5df97c32.a27344",
	"type": "http request",
	"z": "eca9c456.790098",
	"name": "VP3",
	"method": "GET",
	"ret": "txt",
	"url": "",
	"tls": "",
	"x": 497,
	"y": 407,
	"wires": [["fceb9496.5231e8"]]
},
{
	"id": "8efdd8a2.a2c8e8",
	"type": "json",
	"z": "eca9c456.790098",
	"name": "DECODE",
	"x": 706,
	"y": 450,
	"wires": [["de37ac0b.c983a"]]
},
{
	"id": "fceb9496.5231e8",
	"type": "json",
	"z": "eca9c456.790098",
	"name": "DECODE",
	"x": 694,
	"y": 511,
	"wires": [["de37ac0b.c983a"]]
},
{
	"id": "41982ca.2e083d4",
	"type": "function",
	"z": "eca9c456.790098",
	"name": "spread and add /blocks/xx",
	"func": "peers = global.get(\"peers\")\nvar msgs = [];\nfor ( i=0; i<peers.length; i++ ) {\n    msgs.push( {\n        topic : \"peer\",\n        peername: \"vp\" + i,\n        url : peers[i] + \"/chain/blocks/\" + msg.payload.blocknumber\n    });\n}\nreturn msgs;",
	"outputs": "4",
	"noerr": 0,
	"x": 523,
	"y": 116,
	"wires": [["eba605e9.fc65f8"],
	["75ef31d.bedb0d"],
	["34d27c84.76bdf4"],
	["5df97c32.a27344"]]
},
{
	"id": "4d3a638e.6812cc",
	"type": "function",
	"z": "eca9c456.790098",
	"name": "return saved responses",
	"func": "responses = flow.get(\"responses\");\nflow.set(\"responses\" + msg.payload.blocknumber, responses);\n// console.log(\"RESPONSES FOR GET BLOCK\");\n// console.log(JSON.stringify(responses, null, 2));\nmsg.payload.responses = responses;\nmsg.payload.hashes = [];\nfor ( i = 0; i < responses.length; ++i) {\n    msg.payload.hashes.push(responses[i].payload.stateHash);\n}\nconsole.log(\"RETURNING HASHES FROM GET BLOCK\");\nconsole.log(msg.payload.hashes);\nreturn msg;",
	"outputs": 1,
	"noerr": 0,
	"x": 659,
	"y": 793,
	"wires": [[]]
},
{
	"id": "c27c3b11.1ec388",
	"type": "delay",
	"z": "eca9c456.790098",
	"name": "2s",
	"pauseType": "delay",
	"timeout": "2",
	"timeoutUnits": "seconds",
	"rate": "1",
	"rateUnits": "second",
	"randomFirst": "1",
	"randomLast": "5",
	"randomUnits": "seconds",
	"drop": false,
	"x": 232,
	"y": 689,
	"wires": [["1e472059.f2e66"]]
},
{
	"id": "9a3cbbad.6a59d8",
	"type": "function",
	"z": "eca9c456.790098",
	"name": "initialize responses",
	"func": "var s = \"GET BLOCK FROM PEERS: \" + msg.payload.blocknumber;\nconsole.log(s);\nflow.set(\"responses\", []);\nreturn msg;",
	"outputs": 1,
	"noerr": 0,
	"x": 254,
	"y": 111,
	"wires": [["41982ca.2e083d4"]]
},
{
	"id": "de37ac0b.c983a",
	"type": "function",
	"z": "eca9c456.790098",
	"name": "store response",
	"func": "responses = flow.get(\"responses\");\nresponses.push(msg);\nflow.set(\"responses\", responses);\n// console.log(\"STORED RESPONSES\");\n// console.log(flow.get(\"responses\"));\nreturn null;",
	"outputs": 1,
	"noerr": 0,
	"x": 931,
	"y": 429,
	"wires": [[]]
},
{
	"id": "1e472059.f2e66",
	"type": "function",
	"z": "eca9c456.790098",
	"name": "GOT ALL RESPONSES?",
	"func": "responses = flow.get(\"responses\");\nif ( responses.length === global.get(\"numpeers\") ) {\n    // good to go\n    console.log(\"BLOCK [\" + msg.payload.blocknumber + \"] RESPONSES, HAVE \" + responses.length + \"/\" + global.get(\"numpeers\"));\n    return [null, msg];\n}\n// not enough responses, wait some more\nretries = flow.get(\"retries\");\nif ( retries === 15 ) {\n    console.log(\"unable to get block \" + msg.payload.blocknumber + \" - too many retries\");\n    return [null, null];    \n}\nflow.set(\"retries\", retries + 1);\nconsole.log(\"BLOCK [\" + msg.payload.blocknumber + \"] RESPONSES, HAVE \" + responses.length + \"/\" + global.get(\"numpeers\"));\nreturn [msg, null];",
	"outputs": "2",
	"noerr": 0,
	"x": 237,
	"y": 787,
	"wires": [["c27c3b11.1ec388"],
	["4d3a638e.6812cc"]]
},
{
	"id": "fb06d512.188f28",
	"type": "subflow",
	"name": "BinarySearchForDivergentTXN",
	"info": "",
	"in": [{
		"x": 50,
		"y": 30,
		"wires": [{
			"id": "2852caf3.a87bf6"
		}]
	}],
	"out": [{
		"x": 1159,
		"y": 461,
		"wires": [{
			"id": "b9388f47.4b71c",
			"port": 0
		}]
	}]
},
{
	"id": "2852caf3.a87bf6",
	"type": "function",
	"z": "fb06d512.188f28",
	"name": "initialize search",
	"func": "console.log(\"ENTER BINARY SEARCH\")\nflow.set(\"incomingmsg\", msg);\nflow.set(\"height\", msg.payload.heights[0])\nflow.set(\"responses\", []);\nmsg.payload.top = msg.payload.heights[0]-1;\nmsg.payload.bottom = 1;\nmsg.payload.blocknumber = Math.round((msg.payload.bottom + ((msg.payload.top - msg.payload.bottom) / 2)));\nreturn msg;",
	"outputs": 1,
	"noerr": 0,
	"x": 198,
	"y": 31,
	"wires": [["f5784dcc.a3cff"]]
},
{
	"id": "cb39a092.2112e",
	"type": "subflow:eca9c456.790098",
	"z": "fb06d512.188f28",
	"name": "",
	"x": 497,
	"y": 168,
	"wires": [["a799b74d.dc1408"]]
},
{
	"id": "2f94ae57.ae9fe2",
	"type": "function",
	"z": "fb06d512.188f28",
	"name": "COMPARE Hashes",
	"func": "// console.log(\"COMPARE HASHES\");\n// console.log(JSON.stringify(msg, null, 2));\nvar incomingmsg = flow.get(\"incomingmsg\");\nvar hashsame = true;\nvar hash = null;\nfor ( i = 0; i < msg.payload.hashes.length; ++i) {\n    if (!hash) {\n        hash = msg.payload.hashes[i];\n    } else {\n        if ( msg.payload.hashes[i] !== hash) {\n            hashsame = false;\n            break;\n        }\n    }\n}\nincomingmsg.payload.hashsame = hashsame;\nreturn incomingmsg;",
	"outputs": 1,
	"noerr": 0,
	"x": 692,
	"y": 295,
	"wires": [["f18ea710.2c7e48"]]
},
{
	"id": "f18ea710.2c7e48",
	"type": "switch",
	"z": "fb06d512.188f28",
	"name": "HASHES SAME?",
	"property": "payload.hashsame",
	"propertyType": "msg",
	"rules": [{
		"t": "true"
	},
	{
		"t": "false"
	}],
	"checkall": "true",
	"outputs": 2,
	"x": 920,
	"y": 305,
	"wires": [["533878f5.a3e418"],
	["e55ff6f6.4e4fc8"]]
},
{
	"id": "533878f5.a3e418",
	"type": "function",
	"z": "fb06d512.188f28",
	"name": "SAME",
	"func": "console.log(\"SAME\");\nmsg.payload.bottom = msg.payload.blocknumber;\nmsg.payload.blocknumber = Math.round((msg.payload.bottom + ((msg.payload.top - msg.payload.bottom) / 2)));\nreturn msg;",
	"outputs": 1,
	"noerr": 0,
	"x": 574,
	"y": 38,
	"wires": [["f5784dcc.a3cff"]]
},
{
	"id": "e55ff6f6.4e4fc8",
	"type": "function",
	"z": "fb06d512.188f28",
	"name": "NOT SAME",
	"func": "console.log(\"NOT SAME\");\nmsg.payload.top = msg.payload.blocknumber;\nmsg.payload.blocknumber = Math.round((msg.payload.bottom + ((msg.payload.top - msg.payload.bottom) / 2)));\nreturn msg;",
	"outputs": 1,
	"noerr": 0,
	"x": 524,
	"y": 447,
	"wires": [["f5784dcc.a3cff"]]
},
{
	"id": "f5784dcc.a3cff",
	"type": "function",
	"z": "fb06d512.188f28",
	"name": "DONE?",
	"func": "if ( msg.payload.top === msg.payload.blocknumber ) {\n    // we're done ... top is the culprit\n    msg.payload.divergent = msg.payload.top;\n    console.log(\"DIVERGENT BLOCK: \" + msg.payload.divergent);\n    return [null, msg];\n}\nflow.set(\"incomingmsg\", msg);\nreturn [msg, null];",
	"outputs": "2",
	"noerr": 0,
	"x": 276,
	"y": 228,
	"wires": [["cb39a092.2112e"],
	["b9388f47.4b71c"]]
},
{
	"id": "a799b74d.dc1408",
	"type": "function",
	"z": "fb06d512.188f28",
	"name": "SAVE RESPONSES",
	"func": "flow.set(\"responses\" + msg.payload.blocknumber, msg);\nreturn msg;",
	"outputs": 1,
	"noerr": 0,
	"x": 641,
	"y": 230,
	"wires": [["2f94ae57.ae9fe2"]]
},
{
	"id": "b9388f47.4b71c",
	"type": "function",
	"z": "fb06d512.188f28",
	"name": "RETURN DIVERGENT RESPONSES",
	"func": "responses = flow.get(\"responses\" + msg.payload.divergent);\nmsg.payload = {\n    divergent : msg.payload.divergent,\n    responses : responses,\n};\nreturn msg;",
	"outputs": 1,
	"noerr": 0,
	"x": 574,
	"y": 588,
	"wires": [[]]
},
{
	"id": "901395cc.ec3328",
	"type": "subflow",
	"name": "getChainHeights",
	"info": "",
	"in": [{
		"x": 50,
		"y": 113,
		"wires": [{
			"id": "bfb85497.543c78"
		},
		{
			"id": "2eda4d3b.3c0752"
		}]
	}],
	"out": [{
		"x": 1060,
		"y": 622,
		"wires": [{
			"id": "38ce0cb5.0b53c4",
			"port": 0
		}]
	}]
},
{
	"id": "194a50c.62727af",
	"type": "http request",
	"z": "901395cc.ec3328",
	"name": "VP0",
	"method": "GET",
	"ret": "txt",
	"url": "",
	"tls": "",
	"x": 448,
	"y": 236,
	"wires": [["440ccc4c.d5bee4"]]
},
{
	"id": "440ccc4c.d5bee4",
	"type": "json",
	"z": "901395cc.ec3328",
	"name": "DECODE",
	"x": 686,
	"y": 332,
	"wires": [["9f2b296d.835388"]]
},
{
	"id": "50926011.99c2f",
	"type": "http request",
	"z": "901395cc.ec3328",
	"name": "VP1",
	"method": "GET",
	"ret": "txt",
	"url": "",
	"tls": "",
	"x": 449,
	"y": 293,
	"wires": [["f0bca7ed.72d468"]]
},
{
	"id": "f0bca7ed.72d468",
	"type": "json",
	"z": "901395cc.ec3328",
	"name": "DECODE",
	"x": 680,
	"y": 400,
	"wires": [["9f2b296d.835388"]]
},
{
	"id": "61e58076.54dfe",
	"type": "http request",
	"z": "901395cc.ec3328",
	"name": "VP2",
	"method": "GET",
	"ret": "txt",
	"url": "",
	"tls": "",
	"x": 449,
	"y": 352,
	"wires": [["3740f09a.94b"]]
},
{
	"id": "656e0e22.d3c3a",
	"type": "http request",
	"z": "901395cc.ec3328",
	"name": "VP3",
	"method": "GET",
	"ret": "txt",
	"url": "",
	"tls": "",
	"x": 450,
	"y": 409,
	"wires": [["e1f089df.b919c8"]]
},
{
	"id": "3740f09a.94b",
	"type": "json",
	"z": "901395cc.ec3328",
	"name": "DECODE",
	"x": 659,
	"y": 452,
	"wires": [["9f2b296d.835388"]]
},
{
	"id": "e1f089df.b919c8",
	"type": "json",
	"z": "901395cc.ec3328",
	"name": "DECODE",
	"x": 647,
	"y": 513,
	"wires": [["9f2b296d.835388"]]
},
{
	"id": "da56d555.defac8",
	"type": "function",
	"z": "901395cc.ec3328",
	"name": "spread and add /chain",
	"func": "peers = global.get(\"peers\")\nvar msgs = [];\nfor ( i=0; i<peers.length; i++ ) {\n    msgs.push( {\n        topic : \"peer\",\n        peername: \"vp\" + i,\n        url : peers[i] + \"/chain\"\n    });\n}\n// console.log(\"SPREAD AND ADD /CHAIN\");\n// console.log(msgs);\nreturn msgs;",
	"outputs": "4",
	"noerr": 0,
	"x": 456,
	"y": 118,
	"wires": [["194a50c.62727af"],
	["50926011.99c2f"],
	["61e58076.54dfe"],
	["656e0e22.d3c3a"]]
},
{
	"id": "38ce0cb5.0b53c4",
	"type": "function",
	"z": "901395cc.ec3328",
	"name": "return saved responses",
	"func": "msg.payload.responses = flow.get(\"responses\");\nreturn msg;",
	"outputs": 1,
	"noerr": 0,
	"x": 630,
	"y": 815,
	"wires": [[]]
},
{
	"id": "bfb85497.543c78",
	"type": "function",
	"z": "901395cc.ec3328",
	"name": "initialize responses",
	"func": "console.log(\"GET CHAIN HEIGHTS\");\nflow.set(\"responses\", []);\nreturn msg;",
	"outputs": 1,
	"noerr": 0,
	"x": 207,
	"y": 113,
	"wires": [["da56d555.defac8"]]
},
{
	"id": "9f2b296d.835388",
	"type": "function",
	"z": "901395cc.ec3328",
	"name": "store response",
	"func": "responses = flow.get(\"responses\");\nresponses.push(msg);\nflow.set(\"responses\", responses);\n// console.log(\"STORED RESPONSES\");\n// console.log(flow.get(\"responses\"));\nreturn null;",
	"outputs": 1,
	"noerr": 0,
	"x": 884,
	"y": 431,
	"wires": [[]]
},
{
	"id": "2eda4d3b.3c0752",
	"type": "delay",
	"z": "901395cc.ec3328",
	"name": "2s",
	"pauseType": "delay",
	"timeout": "2",
	"timeoutUnits": "seconds",
	"rate": "1",
	"rateUnits": "second",
	"randomFirst": "1",
	"randomLast": "5",
	"randomUnits": "seconds",
	"drop": false,
	"x": 225,
	"y": 712,
	"wires": [["6c1535bf.c2713c"]]
},
{
	"id": "6c1535bf.c2713c",
	"type": "function",
	"z": "901395cc.ec3328",
	"name": "GOT ALL RESPONSES?",
	"func": "responses = flow.get(\"responses\");\nif ( responses.length === global.get(\"numpeers\") ) {\n    // good to go\n    console.log(\"CHAIN HEIGHTS, HAVE \" + responses.length + \"/\" + global.get(\"numpeers\"));\n    return [null, msg];\n}\n// not enough responses, wait some more\nretries = flow.get(\"retries\");\nif ( retries >= 15 ) {\n    console.log(\"unable to get block \" + msg.payload.blocknumber + \" - too many retries\");\n    return [null, null];    \n}\nflow.set(\"retries\", ++retries);\nconsole.log(\"CHAIN HEIGHTS, HAVE \" + responses.length + \"/\" + global.get(\"numpeers\"));\nreturn [msg, null];",
	"outputs": "2",
	"noerr": 0,
	"x": 230,
	"y": 810,
	"wires": [["2eda4d3b.3c0752"],
	["38ce0cb5.0b53c4"]]
},
{
	"id": "522c126a.50b2ec",
	"type": "inject",
	"z": "1bac416a.b9635f",
	"name": "START",
	"topic": "",
	"payload": "{}",
	"payloadType": "json",
	"repeat": "",
	"crontab": "",
	"once": false,
	"x": 95,
	"y": 62,
	"wires": [["38c9d438.5cf8dc"]]
},
{
	"id": "40157f4d.02186",
	"type": "function",
	"z": "1bac416a.b9635f",
	"name": "COMPARE Heights",
	"func": "console.log(\"COMPARE HEIGHTS\");\n//console.log(JSON.stringify(msg, null, 2));\nvar responseslen = msg.payload.responses.length;\nif ( responseslen === 0 ) {\n    // nothing to process\n    console.log(\"COMPARE HEIGHTS RETURNING NULL\");\n    return null;\n}\nvar numpeers = global.get(\"numpeers\");\nvar msgout = JSON.parse(JSON.stringify(msg));\nmsgout.payload = {};\nmsgout.payload.heightspresent = \"all\";\nif ( responseslen < numpeers ) {\n    msgout.payload.heightsmatch = \"incomplete[\" + responseslen + \"/\" + numpeers + \"]\";\n}\nmsgout.payload.peernames = [];\nmsgout.payload.heights = [];\nmsgout.payload.hashes = [];\nvar heightsame = true;\nvar height = null;\nfor ( i = 0; i < responseslen; ++i) {\n    r = msg.payload.responses[i];\n    msgout.payload.peernames.push(msg.payload.responses[i].peername);\n    msgout.payload.heights.push(msg.payload.responses[i].payload.height);\n    msgout.payload.hashes.push(msg.payload.responses[i].payload.currentBlockHash);\n    if (!height) {\n        height = msg.payload.responses[i].payload.height;\n    } else {\n        if ( msg.payload.responses[i].payload.height != height) {\n            heightsame = false;\n        }\n    }\n}\nmsgout.payload.heightsame = heightsame;\nif ( heightsame ) {\n    console.log(\"HEIGHT: \" + height);\n}\nreturn msgout;",
	"outputs": 1,
	"noerr": 0,
	"x": 313,
	"y": 352,
	"wires": [["69305e6f.b517e"]]
},
{
	"id": "fd759a6b.20f5d8",
	"type": "comment",
	"z": "1bac416a.b9635f",
	"name": "README",
	"info": "# How This Flow Works\n\nIn the config node, enter as many peer urls as you would like tracked. The\nflow is set to run once, but you can set it to poll of course. Use periods \nof at least 1m, since this flow can timeout on each invocation of get block.\n\nThe flow sends the same command to all peers in parallel and checks every 2s\nto see if all responses have arrived. It loops until 30s has passed and then\nstops. If all peers respond, the flow continues.\n\nIf the chain heights are all the same, the hash comparison will proceed. Else \nit will print a message that it cannot proceed. Try again.\n\nIf the hash comparison shows divergence, the subflow for binary search is\nlaunched. It will find the point of divergence quickly and will log results \nto the console. The chaincode ID and payload are Base64 decoded in the output.\nOutput is sorted by peer, using the naming convention vpx, where x if the zero\nbased position in your initial config array.",
	"x": 164,
	"y": 521,
	"wires": []
},
{
	"id": "38c9d438.5cf8dc",
	"type": "function",
	"z": "1bac416a.b9635f",
	"name": "CONFIG",
	"func": "var peers = [\n    \"https://9c0c5c00-b013-4251-8d1a-1562b02491f9_vp0.us.blockchain.ibm.com\",\n    \"https://9c0c5c00-b013-4251-8d1a-1562b02491f9_vp1.us.blockchain.ibm.com\",\n    \"https://9c0c5c00-b013-4251-8d1a-1562b02491f9_vp2.us.blockchain.ibm.com\",\n    \"https://9c0c5c00-b013-4251-8d1a-1562b02491f9_vp3.us.blockchain.ibm.com\",\n];\nglobal.set(\"peers\", peers)\nglobal.set(\"port\", 443)\nglobal.set(\"height\", 0)\nglobal.set(\"numpeers\", peers.length)\nreturn msg;",
	"outputs": "1",
	"noerr": 0,
	"x": 197,
	"y": 163,
	"wires": [["b7a8b4ba.55c5e8"]]
},
{
	"id": "b7a8b4ba.55c5e8",
	"type": "subflow:901395cc.ec3328",
	"z": "1bac416a.b9635f",
	"name": "",
	"x": 378,
	"y": 163,
	"wires": [["a0f9ada.0d9ef5"]]
},
{
	"id": "a0f9ada.0d9ef5",
	"type": "delay",
	"z": "1bac416a.b9635f",
	"name": "",
	"pauseType": "delay",
	"timeout": "1",
	"timeoutUnits": "seconds",
	"rate": "1",
	"rateUnits": "second",
	"randomFirst": "1",
	"randomLast": "5",
	"randomUnits": "seconds",
	"drop": false,
	"x": 210,
	"y": 257,
	"wires": [["40157f4d.02186"]]
},
{
	"id": "69305e6f.b517e",
	"type": "switch",
	"z": "1bac416a.b9635f",
	"name": "HEIGHTSAME?",
	"property": "payload.heightsame",
	"propertyType": "msg",
	"rules": [{
		"t": "true"
	},
	{
		"t": "false"
	}],
	"checkall": "true",
	"outputs": 2,
	"x": 536,
	"y": 352,
	"wires": [["739d7f05.8713e"],
	["2f1a5645.1089aa"]]
},
{
	"id": "739d7f05.8713e",
	"type": "function",
	"z": "1bac416a.b9635f",
	"name": "COMPARE Hashes",
	"func": "// console.log(\"COMPARE HASHES\");\n// console.log(JSON.stringify(msg, null, 2));\nvar hashsame = true;\nvar hash = null;\nfor ( i = 0; i < msg.payload.hashes.length; ++i) {\n    if (!hash) {\n        hash = msg.payload.hashes[i];\n    } else {\n        if ( msg.payload.hashes[i] !== hash) {\n            hashsame = false;\n            break;\n        }\n    }\n}\nmsg.payload.hashsame = hashsame;\nreturn msg;",
	"outputs": 1,
	"noerr": 0,
	"x": 804,
	"y": 385,
	"wires": [["a6bd2699.5369a8"]]
},
{
	"id": "2f1a5645.1089aa",
	"type": "function",
	"z": "1bac416a.b9635f",
	"name": "log inconsistent heights message",
	"func": "console.log(\"inconsistent heights, hashes not compared\");\nreturn null;",
	"outputs": 1,
	"noerr": 0,
	"x": 961,
	"y": 231,
	"wires": [[]]
},
{
	"id": "a6bd2699.5369a8",
	"type": "switch",
	"z": "1bac416a.b9635f",
	"name": "HASHSAME?",
	"property": "payload.hashsame",
	"propertyType": "msg",
	"rules": [{
		"t": "true"
	},
	{
		"t": "false"
	}],
	"checkall": "true",
	"outputs": 2,
	"x": 716,
	"y": 528,
	"wires": [["af4664d6.227d48"],
	["a669daa0.5e6498"]]
},
{
	"id": "a669daa0.5e6498",
	"type": "subflow:fb06d512.188f28",
	"z": "1bac416a.b9635f",
	"name": "",
	"x": 558,
	"y": 786,
	"wires": [["bf342cd8.f4b85"]]
},
{
	"id": "fa9b3c54.2fc16",
	"type": "function",
	"z": "1bac416a.b9635f",
	"name": "CONSOLE LOG RESULT OF SEARCH",
	"func": "console.log(\"OUTPUT FROM BINARY SEARCH FLOW\");\nconsole.log(JSON.stringify(msg, null, 2));\nreturn msg;",
	"outputs": 1,
	"noerr": 0,
	"x": 1174,
	"y": 779,
	"wires": [[]]
},
{
	"id": "b3cad724.da7228",
	"type": "comment",
	"z": "1bac416a.b9635f",
	"name": "NO",
	"info": "",
	"x": 563,
	"y": 637,
	"wires": []
},
{
	"id": "af4664d6.227d48",
	"type": "function",
	"z": "1bac416a.b9635f",
	"name": "log chain not divergent",
	"func": "console.log(\"chain is not divergent\");\nmsg.payload = { hashsame : true };\nreturn msg;",
	"outputs": 1,
	"noerr": 0,
	"x": 1139,
	"y": 521,
	"wires": [[]]
},
{
	"id": "613b010f.dde6f",
	"type": "comment",
	"z": "1bac416a.b9635f",
	"name": "YES",
	"info": "",
	"x": 932,
	"y": 499,
	"wires": []
},
{
	"id": "b37bd57c.e3f7c8",
	"type": "comment",
	"z": "1bac416a.b9635f",
	"name": "YES",
	"info": "",
	"x": 842,
	"y": 348,
	"wires": []
},
{
	"id": "70263d08.647f44",
	"type": "comment",
	"z": "1bac416a.b9635f",
	"name": "NO",
	"info": "",
	"x": 940,
	"y": 194,
	"wires": []
},
{
	"id": "bf342cd8.f4b85",
	"type": "function",
	"z": "1bac416a.b9635f",
	"name": "create final response",
	"func": "console.log(\"FINAL RESPONSES FROM SEARCH\");\n\n// sort to get in order vp0,vp1,vp2,vp3...\nm = msg.payload.responses.payload;\nr = msg.payload.responses.payload.responses;\npayload = {\n    height: m.heights[0],\n    divergent: msg.payload.divergent,\n    hashes: [],\n    previoushashes: [],\n    transactions: []\n};\nr.sort(function(a,b) {return (a.peername > b.peername) ? 1 : ((b.peername > a.peername) ? -1 : 0);} );\n// loop over peers\nfor ( var i = 0; i < r.length; ++i) {\n    payload.hashes.push(r[i].payload.stateHash);\n    payload.previoushashes.push(r[i].payload.previousBlockHash);\n    // loop over transactions\n    for ( var j = 0; j < r[i].payload.transactions.length; ++j) {\n        payload.transactions.push({\n            peer: r[i].peername,\n            url: r[i].url,\n            chaincodeid: new Buffer(r[i].payload.transactions[j].chaincodeID, 'base64').toString(),\n            payload: new Buffer(r[i].payload.transactions[j].payload, 'base64').toString(),\n            uuid: r[i].payload.transactions[j].uuid,\n            timestamp: (new Date(r[i].payload.transactions[j].timestamp.seconds*1000)).toString(),\n            result: r[i].payload.nonHashData.transactionResults[j]\n        });\n    }\n}\nmsg.payload = payload;\nreturn msg;",
	"outputs": 1,
	"noerr": 0,
	"x": 851,
	"y": 735,
	"wires": [["fa9b3c54.2fc16"]]
}]